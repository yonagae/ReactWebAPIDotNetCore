@page "/"
@using SproomInbox.Data.DTO
@inject HttpClient Http
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.WebUtilities
@using SproomInbox.Domain.Enum
@using System.Text

<PageTitle>Sproom Inbox</PageTitle>

<h1>Sproom Inbox</h1>

@if (documents != null)
{
    <p>Welcome to your inbox! You have @documents.Count documents</p>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>FileReference</th>
                <th>Type</th>
                <th>State</th>
                <th>Date</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var document in documents)
            {
                <tr>
                    <td>@document.Id</td>
                    <td>@document.FileReference</td>
                    <td>@document.DocumentType</td>
                    <td>@document.State</td>
                    <td>@document.DateTime</td>
                    <td>
                        @if (document.State == eState.Rejected.ToString() || document.State == eState.Received.ToString())
                        {
                            <a class="btn btn-sm btn-success"  onclick="@(async () => await Approve(document.Id))">Approve</a>
                        }
                        @if (document.State == eState.Approved.ToString() || document.State == eState.Received.ToString())
                        {
                            <a class="btn btn-sm btn-danger" onclick="@(async () => await Reject(document.Id))">Reject</a>
                        }
                    </td>
                    <td>
                        <a class="btn btn-sm btn-warning" href="./DocumentHistory?id=@document.Id">History</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    private IList<DocumentDTO>? documents;

    protected override async Task OnInitializedAsync()
    {
        documents = await Http.GetFromJsonAsync<IList<DocumentDTO>>("Document");
    }

    async Task Reject(Guid id)
    {
        await ChangeStatus("/Document/Reject/" + id);
    }

    async Task Approve(Guid id)
    {
        await ChangeStatus("/Document/Approve/" + id);
    }

    async Task<HttpResponseMessage> ChangeStatus(string url)
    {
        string _id = "";
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if(queryStrings.TryGetValue("id", out var name))
        {
            _id = name;
        }

        var httpContent = new StringContent(_id, Encoding.UTF8, "application/json");

        var dc = await Http.PutAsync(url , httpContent);

        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);

        return dc;
    }
}
